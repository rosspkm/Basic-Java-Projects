// Point.java

public class Point {

   private int x;

   private int y;

   public Point() {

       this(0, 0);

   }

   public Point(int x, int y) {

       this.x = x;

       this.y = y;

   }

   public int getX() {

       return x;

   }

   public int getY() {

       return y;

   }

   public String toString() {

       return "(" + x + ", " + y + ")";

   }

}

================================

// Triangle.java

public class Triangle implements Comparable<Triangle> {
   private Point vertexA;
   private Point vertexB;
   private Point vertexC;
  
  

   /**
   * @param vertexA
   * @param vertexB
   * @param vertexC
   */
   public Triangle(Point vertexA, Point vertexB, Point vertexC) {
       this.vertexA = vertexA;
       this.vertexB = vertexB;
       this.vertexC = vertexC;
   }
  

   /**
   * @return the vertexA
   */
   public Point getVertexA() {
       return vertexA;
   }


   /**
   * @param vertexA the vertexA to set
   */
   public void setVertexA(Point vertexA) {
       this.vertexA = vertexA;
   }


   /**
   * @return the vertexB
   */
   public Point getVertexB() {
       return vertexB;
   }


   /**
   * @param vertexB the vertexB to set
   */
   public void setVertexB(Point vertexB) {
       this.vertexB = vertexB;
   }


   /**
   * @return the vertexC
   */
   public Point getVertexC() {
       return vertexC;
   }


   /**
   * @param vertexC the vertexC to set
   */
   public void setVertexC(Point vertexC) {
       this.vertexC = vertexC;
   }

   private double calcDistance(Point p1,Point p2)
   {
   return Math.sqrt(Math.pow((p2.getX() - p1.getX()), 2) + Math.pow((p2.getY() - p1.getY()), 2));
   }
   // Get area method
   public double getArea() {
   double area;
   double side1,side2,side3;
   side1=calcDistance(vertexA, vertexB);
           side2=calcDistance(vertexB, vertexC);
           side3=calcDistance(vertexC, vertexA);
   double p = (side1 + side2 + side3) / 2;
   double step1 = (p - side1) * (p - side2) * (p - side3);
   double step2 = p * step1;
   area = Math.sqrt(step2);
   return area;
   }

   /* (non-Javadoc)
   * @see java.lang.Object#toString()
   */
   @Override
   public String toString() {
       return "Triangle [vertexA=" + vertexA + ", vertexB=" + vertexB
               + ", vertexC=" + vertexC + "]";
   }


   @Override
   public int compareTo(Triangle t) {
       if(getArea()<t.getArea())
           return -1;
       else if(getArea()>t.getArea())
           return 1;
       return 0;
   }

}

==================================

// Test.java

import java.util.ArrayList;
import java.util.Collections;

public class Test {

   public static void main(String[] args) {
Point p1=new Point(3,4);
Point p2=new Point(4,5);
Point p3=new Point(2,3);
Point p4=new Point(6,7);
Point p5=new Point(2,5);
  
  
       ArrayList<Triangle> arl=new ArrayList<Triangle>(10);
       arl.add(new Triangle(p1,p2,p3));
       arl.add(new Triangle(p2,p3,p4));
       arl.add(new Triangle(p1,p3,p5));
       arl.add(new Triangle(p1,p2,p5));
       arl.add(new Triangle(p5,p2,p3));
       arl.add(new Triangle(p3,p2,p5));
       arl.add(new Triangle(p1,p2,p5));
       arl.add(new Triangle(p2,p4,p3));
       arl.add(new Triangle(p5,p4,p1));
       arl.add(new Triangle(p2,p5,p4));
      
       System.out.println("____ Displaying the Triangles Before sort ____");
       for(int i=0;i<arl.size();i++)
       {
           System.out.println(arl.get(i));
       }
      
       Collections.sort(arl);
  
      
       System.out.println("\n\n____ Displaying the Triangles After sort ____");
       for(int i=0;i<arl.size();i++)
       {
           System.out.println(arl.get(i));
       }

   }

}